var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.116,1,2.082]],["body/controllers/AppController.html",[0,1.859,1,3.469,2,1.524,3,0.404,4,0.35,5,0.35,6,3.669,7,0.562,8,0.031,9,1.016,10,3.063,11,3.669,12,0.404,13,0.02,14,3.196,15,2.124,16,0.025,17,0.025]],["title/modules/AppModule.html",[18,1.116,19,2.082]],["body/modules/AppModule.html",[1,2.865,2,1.304,3,0.238,4,0.206,5,0.206,7,0.618,8,0.031,9,0.598,10,2.852,11,2.16,12,0.238,13,0.012,16,0.018,17,0.018,18,1.536,19,3.978,20,1.667,21,1.147,22,1.369,23,1.369,24,1.147,25,2.344,26,1.369,27,2.16,28,2.16,29,2.16,30,2.852,31,3.14,32,3.14,33,2.605,34,1.99,35,1.369,36,1.251,37,2.583,38,2.865,39,2.583,40,2.583,41,2.583,42,2.583,43,1.882,44,1.369,45,1.807,46,2.583,47,1.204,48,2.583,49,2.583,50,2.16,51,2.583,52,1.882,53,2.583,54,0.598,55,3.754,56,1.508,57,2.583,58,1.369,59,2.583,60,2.583,61,2.583,62,1.674,63,2.583,64,2.583,65,2.583,66,2.583,67,2.16,68,2.16]],["title/injectables/AppService.html",[10,1.704,69,1.116]],["body/injectables/AppService.html",[3,0.388,4,0.336,5,0.336,7,0.442,8,0.03,9,0.976,10,2.769,12,0.388,13,0.019,16,0.025,17,0.025,69,1.814,70,2.234,71,3.524,72,0.822,73,2.769,74,5.932,75,1.061,76,4.214,77,2.234,78,1.674,79,2.234,80,4.214,81,4.214]],["title/controllers/AuthController.html",[0,1.116,82,2.082]],["body/controllers/AuthController.html",[0,1.508,2,1.508,3,0.4,4,0.347,5,0.347,7,0.559,8,0.031,9,1.006,12,0.4,13,0.02,14,3.163,15,2.103,16,0.025,17,0.025,82,3.447,83,3.631,84,2.814,85,4.342,86,2.786,87,3.631,88,4.342]],["title/modules/AuthModule.html",[18,1.116,30,1.704]],["body/modules/AuthModule.html",[2,1.608,3,0.322,4,0.279,5,0.279,7,0.581,8,0.031,9,0.809,12,0.322,13,0.016,16,0.022,17,0.022,18,1.804,20,1.551,21,1.551,22,1.851,23,1.851,24,1.551,25,2.753,26,2.753,30,3.198,33,2.241,34,2.454,35,1.851,36,1.691,38,2.262,82,3.365,86,3.077,87,2.919,89,2.919,90,2.919,91,2.919,92,3.491,93,2.999,94,3.491,95,2.919]],["title/injectables/AuthService.html",[69,1.116,86,1.556]],["body/injectables/AuthService.html",[3,0.288,4,0.249,5,0.249,7,0.451,8,0.031,9,0.723,12,0.288,13,0.014,15,1.511,16,0.02,17,0.02,52,2.274,54,0.994,58,1.655,62,3.178,69,1.491,70,1.655,72,0.609,73,2.275,75,1.234,77,2.275,78,1.966,79,2.275,86,2.078,93,2.022,96,2.61,97,3.34,98,5.282,99,4.291,100,2.781,101,3.121,102,2.682,103,3.121,104,2.505,105,2.078,106,1.753,107,3.589,108,3.121,109,3.121,110,4.291,111,2.375,112,3.121,113,2.022,114,3.121,115,3.121,116,2.022,117,2.61,118,1.655,119,3.121,120,3.121]],["title/classes/CreateMetaOptionsDto.html",[13,0.015,121,1.876]],["body/classes/CreateMetaOptionsDto.html",[3,0.358,4,0.31,5,0.31,7,0.408,8,0.03,12,0.358,13,0.023,16,0.024,17,0.024,47,1.754,54,1.15,72,0.758,75,1.25,78,1.592,121,2.898,122,1.727,123,3.984,124,3.251,125,1.724,126,3.984,127,3.984,128,1.869,129,3.888,130,3.888,131,4.198,132,3.888,133,3.617,134,2.061]],["title/classes/CreatePostDto.html",[13,0.015,135,1.704]],["body/classes/CreatePostDto.html",[3,0.149,4,0.129,5,0.129,7,0.467,8,0.031,12,0.149,13,0.015,16,0.012,17,0.012,47,1.616,54,1.322,58,2.006,72,0.315,75,1.304,78,1.786,106,2.116,121,2.209,122,0.716,123,3.859,125,1.143,126,1.175,127,1.175,128,1.95,131,3.242,133,3.242,134,0.855,135,1.385,136,1.175,137,3.029,138,2.753,139,2.753,140,3.555,141,2.753,142,2.398,143,2.398,144,3.023,145,2.398,146,3.414,147,1.613,148,1.613,149,1.613,150,2.612,151,2.612,152,1.613,153,1.613,154,2.612,155,2.185,156,1.525,157,2.612,158,1.613,159,1.613,160,1.613,161,1.613,162,2.06,163,3.165,164,2.612,165,1.693,166,2.185,167,1.613,168,1.613,169,1.903,170,1.613,171,1.613,172,1.349,173,2.612,174,2.612,175,3.292,176,2.612,177,2.612,178,1.613,179,1.613,180,1.613,181,2.612,182,1.613,183,1.613,184,2.185,185,2.185,186,2.185,187,2.185,188,1.613,189,1.613,190,1.613,191,3.784,192,1.613,193,1.613,194,1.613,195,3.292,196,1.613,197,1.613,198,2.612,199,2.612,200,3.414,201,2.612,202,1.349,203,1.349,204,1.349,205,2.612,206,1.175,207,1.613,208,1.613,209,1.175,210,1.349,211,3.477,212,3.722,213,0.855,214,2.185,215,1.349,216,1.693,217,2.612,218,1.349,219,1.613,220,1.613,221,1.613,222,1.613]],["title/classes/CreateTagDto.html",[13,0.015,223,2.341]],["body/classes/CreateTagDto.html",[3,0.409,4,0.354,5,0.354,8,0.029,12,0.409,13,0.02,16,0.026,17,0.026,54,1.027,72,0.864,75,1.116,78,1.727,105,2.811,122,1.969,125,1.871,223,3.924,224,4.505,225,3.707,226,4.432]],["title/classes/CreateUserDto.html",[13,0.015,227,1.704]],["body/classes/CreateUserDto.html",[3,0.283,4,0.245,5,0.245,7,0.322,8,0.03,12,0.283,13,0.02,16,0.02,17,0.02,54,1.214,62,3.148,72,0.598,75,1.319,78,1.906,106,1.731,113,3.148,122,1.361,125,1.472,128,1.973,131,3.818,133,3.818,134,1.625,200,3.087,202,2.563,203,2.563,204,2.563,214,3.544,215,3.544,227,2.247,228,4.601,229,2.233,230,3.539,231,4.063,232,3.065,233,3.065,234,3.065,235,3.065,236,3.065,237,3.065,238,3.065,239,4.238,240,4.238,241,4.238,242,4.238,243,4.238,244,4.238,245,1.883,246,3.065,247,4.238,248,3.065,249,3.065]],["title/classes/GetUsersParamDto.html",[13,0.015,250,1.876]],["body/classes/GetUsersParamDto.html",[3,0.334,4,0.289,5,0.289,7,0.555,8,0.031,12,0.334,13,0.024,16,0.023,17,0.023,45,1.938,54,1.225,72,0.707,75,0.912,106,1.938,111,2.821,118,2.515,122,1.61,125,1.648,128,1.364,134,1.921,162,1.481,172,3.031,200,3.456,206,2.64,212,3.967,213,1.921,216,3.074,245,2.349,250,2.769,251,3.967,252,3.031,253,4.744,254,3.624,255,3.624,256,3.967,257,3.624]],["title/classes/PatchPostDto.html",[13,0.015,258,2.082]],["body/classes/PatchPostDto.html",[3,0.341,4,0.296,5,0.296,7,0.561,8,0.031,12,0.341,13,0.022,16,0.023,17,0.023,47,1.542,54,0.858,72,0.722,75,0.932,111,2.84,122,1.645,125,1.671,128,1.394,134,1.963,135,1.963,136,2.697,162,1.513,209,2.697,211,4.023,213,1.963,245,2.137,256,4.023,258,3.117,259,4.023,260,4.023,261,4.811,262,3.702,263,4.023,264,3.702,265,3.702,266,3.096,267,3.702,268,2.697,269,3.096]],["title/classes/PatchUserDto.html",[13,0.015,270,2.082]],["body/classes/PatchUserDto.html",[3,0.404,4,0.35,5,0.35,7,0.562,8,0.03,12,0.404,13,0.02,16,0.025,17,0.025,122,1.949,209,3.196,227,2.326,229,3.196,260,4.477,266,3.669,270,3.469,271,3.669,272,5.353,273,3.669,274,3.669,275,3.196]],["title/entities/Post.html",[47,1.03,276,1.556]],["body/entities/Post.html",[3,0.174,4,0.151,5,0.151,7,0.311,8,0.031,12,0.174,13,0.009,16,0.014,17,0.014,47,1.173,54,1.414,56,1.104,58,2.986,72,0.369,75,1.395,78,1.891,111,1.772,121,2.135,125,1.03,128,2.086,137,2.665,138,3.06,139,3.06,140,2.665,141,3.06,142,2.665,143,2.665,144,2.135,145,2.665,146,2.665,156,3.016,169,3.018,210,1.582,245,1.317,276,1.436,277,1.582,278,3.96,279,4.364,280,4.296,281,4.931,282,4.421,283,1.891,284,1.891,285,2.665,286,1.891,287,1.891,288,1.891,289,1.891,290,1.891,291,1.891,292,1.891,293,1.891,294,1.891,295,4.037,296,1.003,297,1.104]],["title/injectables/PostServices.html",[69,1.116,298,1.704]],["body/injectables/PostServices.html",[3,0.258,4,0.223,5,0.223,7,0.558,8,0.032,9,0.647,12,0.258,13,0.013,15,1.353,16,0.019,17,0.019,44,1.481,45,2.172,47,0.896,54,0.92,69,1.38,70,1.481,72,0.545,73,2.106,75,1,77,1.481,78,0.896,79,1.481,97,2.937,100,2.574,104,2.318,105,1.924,106,1.623,116,1.811,118,1.481,135,2.819,137,2.894,146,2.894,268,2.036,296,1.481,297,1.631,298,2.106,299,2.337,300,3.865,301,3.322,302,2.794,303,3.666,304,2.794,305,3.972,306,3.322,307,2.794,308,2.337,309,2.337,310,2.337,311,3.972,312,2.794,313,2.794,314,2.794,315,2.794,316,2.794,317,2.794,318,3.972,319,2.794,320,2.337,321,2.794]],["title/controllers/PostsController.html",[0,1.116,322,2.082]],["body/controllers/PostsController.html",[0,0.823,2,0.823,3,0.218,4,0.189,5,0.189,7,0.522,8,0.031,9,0.549,12,0.218,13,0.011,14,1.725,15,1.147,16,0.017,17,0.017,47,1.493,50,2.945,54,0.974,68,3.894,72,0.462,73,1.867,75,1.058,77,2.229,78,1.348,79,1.867,84,1.535,97,3.309,104,2.454,105,2.036,106,1.718,128,1.583,135,2.765,144,2.056,162,1.902,213,1.256,258,3.017,268,2.566,269,2.945,297,1.382,298,1.867,301,2.945,306,1.981,322,2.282,323,1.981,324,2.368,325,3.522,326,3.522,327,3.522,328,3.522,329,3.392,330,3.522,331,5.215,332,3.522,333,2.368,334,2.368,335,2.368,336,3.522,337,2.368,338,3.522,339,3.522,340,2.368,341,3.522,342,2.368,343,2.368,344,3.522,345,1.981,346,1.981,347,2.945,348,1.981,349,3.516,350,3.516,351,1.981,352,1.981,353,2.368,354,2.368,355,2.368,356,2.368,357,2.368,358,2.945,359,2.945,360,2.368,361,2.368,362,2.368,363,2.368]],["title/modules/PostsModule.html",[18,1.116,31,1.876]],["body/modules/PostsModule.html",[2,1.582,3,0.314,4,0.272,5,0.272,7,0.617,8,0.031,9,0.789,12,0.314,13,0.016,16,0.022,17,0.022,18,1.782,20,1.513,21,1.513,22,1.806,23,1.806,24,1.513,25,2.72,26,1.806,31,3.556,33,2.844,34,2.414,35,1.806,36,1.65,38,2.951,43,2.482,44,1.806,47,1.092,95,2.849,298,3.113,309,2.849,322,3.324,348,2.849,364,2.849,365,3.407,366,2.849,367,3.407,368,3.407,369,3.407]],["title/entities/Tag.html",[276,1.556,370,2.341]],["body/entities/Tag.html",[3,0.211,4,0.183,5,0.183,7,0.24,8,0.03,12,0.211,13,0.011,16,0.016,17,0.016,54,1.391,56,1.334,58,3.032,72,0.446,75,1.413,78,1.834,105,1.994,106,1.869,111,1.994,125,1.191,128,2.114,142,2.999,143,2.999,156,2.67,162,1.682,169,3.75,245,1.524,276,1.661,278,3.571,279,3.333,280,3.75,282,4.167,285,2.999,295,3.75,296,1.212,370,2.499,371,1.912,372,4.117,373,4.117,374,4.117,375,4.117,376,4.117,377,2.286,378,4.117,379,2.286,380,5.147,381,2.286,382,3.43,383,2.286,384,2.286,385,4.575,386,3.826,387,2.286,388,2.286,389,2.286,390,4.117,391,2.286]],["title/controllers/TagsController.html",[0,1.116,392,2.082]],["body/controllers/TagsController.html",[0,1.597,2,1.597,3,0.424,4,0.367,5,0.367,7,0.483,8,0.03,9,1.065,12,0.424,13,0.021,16,0.026,17,0.026,84,2.98,145,3.351,392,3.569,393,3.846,394,4.599]],["title/modules/TagsModule.html",[18,1.116,32,1.876]],["body/modules/TagsModule.html",[2,1.705,3,0.352,4,0.305,5,0.305,7,0.569,8,0.03,9,0.885,12,0.352,13,0.018,16,0.023,17,0.023,18,1.884,20,1.696,21,1.696,22,2.024,23,2.024,24,1.696,25,2.875,26,2.024,32,3.537,34,2.602,35,2.024,36,1.849,392,3.514,395,3.193,396,3.193,397,3.537,398,3.818,399,3.818,400,3.818]],["title/injectables/TagsService.html",[69,1.116,397,1.876]],["body/injectables/TagsService.html",[3,0.429,4,0.371,5,0.371,7,0.488,8,0.03,9,1.077,12,0.429,13,0.021,16,0.026,17,0.026,69,1.926,70,2.465,397,3.236,401,3.888]],["title/entities/User.html",[45,1.313,276,1.556]],["body/entities/User.html",[3,0.257,4,0.222,5,0.222,7,0.292,8,0.03,12,0.257,13,0.013,16,0.019,17,0.019,45,1.619,54,1.368,56,1.626,58,2.664,62,2.989,72,0.543,75,1.337,78,1.861,111,2.234,113,2.989,125,1.376,128,1.999,156,3.221,230,3.361,231,3.858,245,1.76,276,1.919,278,3.661,279,4.228,280,4.228,281,4.853,282,4.228,285,3.361,295,3.868,296,1.477,386,3.314,402,2.329,403,2.785,404,2.785,405,2.785,406,2.785,407,2.785]],["title/controllers/UsersController.html",[0,1.116,408,2.082]],["body/controllers/UsersController.html",[0,0.695,2,0.695,3,0.185,4,0.16,5,0.16,7,0.513,8,0.031,9,0.464,12,0.185,13,0.009,15,0.97,16,0.015,17,0.015,45,1.267,47,1.216,54,1.181,72,0.39,73,1.644,75,0.955,77,2.011,79,2.265,84,1.297,97,3.156,100,1.297,102,1.501,104,2.214,105,2.238,106,1.55,107,1.674,116,1.297,118,2.265,128,1.428,144,1.169,155,3.572,156,2.493,162,2.257,165,3.167,213,1.061,216,2.768,227,2.591,245,2.454,250,2.853,270,2.994,275,2.258,297,1.169,310,1.674,329,2.258,345,2.593,346,1.674,347,3.173,349,2.593,350,2.593,351,1.674,352,1.674,358,1.674,359,1.674,408,2.009,409,1.674,410,2.593,411,3.794,412,3.1,413,1.674,414,2.002,415,2.002,416,4.087,417,2.002,418,3.1,419,3.1,420,2.002,421,3.1,422,3.1,423,3.1,424,2.593,425,2.002,426,2.002,427,3.1,428,2.002,429,2.002,430,2.002,431,3.794,432,2.002,433,2.002,434,2.002,435,2.002,436,2.002,437,3.794,438,2.002,439,2.002,440,1.674,441,1.674,442,1.674,443,3.794,444,2.002,445,2.002,446,2.002,447,2.002,448,2.002,449,2.002,450,2.002,451,2.002,452,2.002,453,2.002,454,2.002,455,2.002,456,2.002]],["title/modules/UsersModule.html",[18,1.116,33,1.556]],["body/modules/UsersModule.html",[2,1.561,3,0.308,4,0.267,5,0.267,7,0.613,8,0.031,9,0.774,12,0.308,13,0.015,16,0.021,17,0.021,18,1.764,20,1.484,21,1.484,22,1.771,23,1.771,24,1.484,25,2.693,26,2.693,30,2.383,33,2.89,34,2.383,35,1.771,36,1.618,38,2.165,43,2.434,44,1.771,45,1.365,93,2.912,102,3.056,408,3.291,442,2.794,457,2.794,458,2.794,459,2.794,460,3.341,461,3.341,462,3.341,463,2.794,464,3.341]],["title/injectables/UsersService.html",[69,1.116,102,1.556]],["body/injectables/UsersService.html",[3,0.189,4,0.164,5,0.164,7,0.54,8,0.031,9,0.475,12,0.189,13,0.018,15,0.993,16,0.015,17,0.015,44,1.087,45,0.838,52,1.494,54,1.002,69,1.097,70,1.087,72,0.4,73,1.674,75,1.089,77,2.041,78,1.498,79,2.041,86,0.993,93,1.328,97,3.178,100,2.046,102,1.529,104,2.525,105,2.095,106,1.767,111,2.49,113,3.027,116,1.328,117,1.715,118,2.725,162,0.838,165,2.495,227,2.477,230,3.151,245,2.284,250,2.88,275,1.494,296,1.087,297,1.197,300,3.22,303,3.151,308,1.715,320,2.641,410,2.641,413,2.641,416,3.22,440,1.715,441,1.715,463,1.715,465,1.715,466,3.157,467,2.641,468,3.851,469,3.157,470,2.05,471,2.05,472,3.157,473,2.05,474,2.05,475,2.05,476,2.05,477,4.326,478,3.157,479,2.05,480,2.05,481,2.05,482,2.05,483,2.05,484,2.05,485,3.851,486,2.05,487,2.05,488,3.157,489,3.157,490,2.05,491,2.05,492,2.05,493,2.05,494,2.05]],["title/coverage.html",[495,3.189]],["body/coverage.html",[0,1.833,1,1.776,5,0.219,6,2.292,8,0.031,10,1.453,13,0.026,16,0.019,17,0.019,24,1.217,45,1.12,47,1.256,54,0.635,69,1.833,71,2.292,82,1.776,83,2.292,86,1.327,96,2.292,102,1.327,118,1.453,121,1.6,123,2.854,124,2.292,135,1.453,136,2.854,223,1.996,224,2.292,225,2.292,227,1.453,228,2.292,229,2.854,250,1.6,251,2.292,252,2.292,258,1.776,259,2.292,270,1.776,271,2.292,276,2.214,277,2.292,298,1.453,299,2.292,322,1.776,323,2.292,329,1.996,370,1.996,371,2.292,392,1.776,393,2.292,397,1.6,401,2.292,402,2.292,408,1.776,409,2.292,465,2.292,467,2.292,495,1.996,496,2.292,497,2.741,498,2.741,499,6.385,500,5.882,501,4.989,502,4.572,503,2.292,504,2.741,505,3.917,506,2.741,507,2.741,508,2.741,509,2.741,510,2.741]],["title/dependencies.html",[21,1.716,511,2.247]],["body/dependencies.html",[8,0.031,9,0.93,13,0.023,16,0.024,17,0.024,21,1.784,44,2.129,134,2.129,206,2.925,213,2.129,273,3.358,274,3.358,296,2.129,512,4.016,513,4.016,514,5.552,515,4.016,516,4.016,517,4.016,518,4.016,519,4.016,520,4.016,521,4.016,522,4.016,523,4.016,524,4.016,525,4.016,526,4.016,527,4.016,528,4.016,529,4.016,530,4.016]],["title/miscellaneous/enumerations.html",[531,1.741,532,3.231]],["body/miscellaneous/enumerations.html",[8,0.03,16,0.024,17,0.024,47,1.634,72,0.79,127,4.603,140,3.714,144,2.975,165,3.303,166,4.263,184,4.263,185,4.263,186,4.263,187,4.263,218,4.263,531,2.627,532,3.39,533,4.054,534,4.054,535,4.054,536,4.054]],["title/miscellaneous/functions.html",[531,1.741,537,3.231]],["body/miscellaneous/functions.html",[8,0.027,16,0.027,17,0.027,24,2.681,72,0.948,503,4.065,531,3.15,537,4.065,538,4.861]],["title/index.html",[72,0.524,539,2.687,540,2.687]],["body/index.html",[4,0.167,8,0.029,16,0.015,17,0.015,36,2.411,67,4.47,126,1.526,162,0.856,163,1.752,216,2.835,263,1.752,303,1.526,424,4.163,495,1.526,496,2.685,541,2.095,542,2.095,543,3.903,544,3.211,545,2.095,546,2.095,547,2.095,548,2.095,549,3.211,550,3.903,551,2.095,552,2.095,553,4.375,554,2.095,555,5.345,556,2.095,557,5.181,558,2.095,559,2.095,560,2.095,561,3.211,562,2.095,563,3.211,564,2.095,565,3.903,566,2.095,567,3.211,568,2.095,569,2.095,570,2.095,571,2.095,572,2.095,573,4.375,574,3.211,575,2.095,576,2.095,577,2.095,578,2.095,579,4.977,580,3.211,581,4.375,582,2.095,583,3.211,584,2.095,585,2.095,586,3.211,587,4.977,588,4.375,589,2.095,590,3.211,591,2.095,592,2.095,593,2.095,594,2.095,595,4.375,596,2.095,597,2.095,598,2.095,599,2.095,600,3.211,601,2.095,602,2.095,603,2.095,604,2.095,605,2.095,606,3.211,607,2.095,608,2.095,609,2.095,610,3.211,611,2.095,612,2.095,613,3.659,614,3.211,615,2.095,616,2.095,617,2.095,618,2.095,619,2.095,620,2.095,621,2.095,622,2.095,623,3.211,624,2.095,625,2.095,626,2.095,627,2.095,628,3.903,629,2.095,630,2.095,631,2.095,632,2.095,633,2.095,634,3.211,635,2.095,636,2.095,637,2.095,638,2.095,639,2.095,640,3.211,641,2.095,642,2.095,643,2.095,644,3.211,645,3.211,646,2.095,647,2.095,648,2.095,649,2.095,650,2.095,651,2.095,652,2.095,653,2.095,654,2.095,655,2.095,656,2.095,657,1.752,658,2.095,659,2.095,660,2.095,661,2.095,662,2.095,663,2.095,664,1.752]],["title/modules.html",[20,1.945]],["body/modules.html",[8,0.025,16,0.025,17,0.025,19,2.857,20,1.959,30,2.338,31,2.574,32,2.574,33,2.135,613,5.166,665,6.178,666,6.178,667,6.178]],["title/overview.html",[668,3.661]],["body/overview.html",[2,1.08,8,0.03,10,2.595,16,0.02,17,0.02,18,1.08,19,4.042,20,1.381,21,1.381,22,1.649,23,1.649,24,1.381,25,1.649,26,1.649,27,2.601,28,2.601,29,2.601,30,3.03,31,3.418,32,3.228,33,2.836,34,2.269,35,1.649,36,1.506,56,1.815,70,1.649,86,2.836,89,2.601,90,2.601,91,2.601,102,2.836,122,1.381,298,2.595,364,2.601,366,2.601,395,2.601,396,2.601,397,2.857,457,2.601,458,2.601,459,2.601,668,2.601,669,4.895,670,3.11,671,3.11]],["title/properties.html",[125,1.342,511,2.247]],["body/properties.html",[8,0.03,16,0.027,17,0.027,125,1.66,162,1.953,657,3.997,664,3.997,672,4.779,673,4.779,674,4.779]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":499,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":673,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":522,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":527,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":530,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":521,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":500,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":506,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":501,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":505,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":502,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":507,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":427,"title":{},"body":{"controllers/UsersController.html":{}}}],["1.1.23",{"_index":513,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":447,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":514,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":520,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":382,"title":{},"body":{"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":426,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":257,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":254,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["2",{"_index":494,"title":{},"body":{"injectables/UsersService.html":{}}}],["2.0.5",{"_index":516,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["201",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{}}}],["232",{"_index":493,"title":{},"body":{"injectables/UsersService.html":{}}}],["233",{"_index":490,"title":{},"body":{"injectables/UsersService.html":{}}}],["256",{"_index":385,"title":{},"body":{"entities/Tag.html":{}}}],["3",{"_index":670,"title":{},"body":{"overview.html":{}}}],["3/5",{"_index":509,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":669,"title":{},"body":{"overview.html":{}}}],["5432",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["60",{"_index":508,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":671,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":519,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":529,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.11.5",{"_index":524,"title":{},"body":{"dependencies.html":{}}}],["90",{"_index":281,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["allowing",{"_index":601,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":650,"title":{},"body":{"index.html":{}}}],["apioperation",{"_index":349,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":262,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isarray()@isstring({each",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({description",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":443,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiquery({name",{"_index":425,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":350,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":351,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":354,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":445,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["applications",{"_index":549,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["asdfasdf",{"_index":314,"title":{},"body":{"injectables/PostServices.html":{}}}],["async",{"_index":300,"title":{},"body":{"injectables/PostServices.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":82,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":657,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":86,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":320,"title":{},"body":{"injectables/PostServices.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":590,"title":{},"body":{"index.html":{}}}],["backers",{"_index":651,"title":{},"body":{"index.html":{}}}],["based",{"_index":585,"title":{},"body":{"index.html":{}}}],["blog",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":643,"title":{},"body":{"index.html":{}}}],["body",{"_index":346,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":667,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":665,"title":{},"body":{"modules.html":{}}}],["building",{"_index":544,"title":{},"body":{"index.html":{}}}],["channel",{"_index":616,"title":{},"body":{"index.html":{}}}],["check",{"_index":579,"title":{},"body":{"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":122,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":600,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":584,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":364,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":365,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":366,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":395,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":396,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":457,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":458,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":459,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":295,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":278,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["come",{"_index":607,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":512,"title":{},"body":{"dependencies.html":{}}}],["connect",{"_index":466,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(patchpostsdto",{"_index":363,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostServices.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(postrepository",{"_index":302,"title":{},"body":{"injectables/PostServices.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["constructor(userservice",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(usersrepository",{"_index":470,"title":{},"body":{"injectables/UsersService.html":{}}}],["content",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":353,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":394,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":444,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":622,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":495,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["created",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{}}}],["createdate",{"_index":372,"title":{},"body":{"entities/Tag.html":{}}}],["createdatecolumn",{"_index":376,"title":{},"body":{"entities/Tag.html":{}}}],["createmetaoptionsdto",{"_index":121,"title":{"classes/CreateMetaOptionsDto.html":{}},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"coverage.html":{}}}],["createpost",{"_index":301,"title":{},"body":{"injectables/PostServices.html":{},"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":360,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":306,"title":{},"body":{"injectables/PostServices.html":{},"controllers/PostsController.html":{}}}],["createpostdto",{"_index":135,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["creates",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{}}}],["createtagdto",{"_index":223,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["createuser",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":454,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":227,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":484,"title":{},"body":{"injectables/UsersService.html":{}}}],["database",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":128,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":618,"title":{},"body":{"index.html":{}}}],["defaultvaluepipe",{"_index":438,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":451,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":449,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":433,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletedatecolumn",{"_index":378,"title":{},"body":{"entities/Tag.html":{}}}],["deleteddate",{"_index":373,"title":{},"body":{"entities/Tag.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":573,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":589,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":580,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":599,"title":{},"body":{"index.html":{}}}],["description",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":558,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":630,"title":{},"body":{"index.html":{}}}],["discord",{"_index":615,"title":{},"body":{"index.html":{}}}],["dive",{"_index":617,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":496,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":297,"title":{},"body":{"entities/Post.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":440,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":352,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":568,"title":{},"body":{"index.html":{}}}],["each",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":545,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":578,"title":{},"body":{"index.html":{}}}],["email",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["ensure",{"_index":576,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":633,"title":{},"body":{"index.html":{}}}],["entities",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":276,"title":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":532,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posttype.enum",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/status.enum",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["existinguser",{"_index":482,"title":{},"body":{"injectables/UsersService.html":{}}}],["experience",{"_index":620,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":518,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":260,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":593,"title":{},"body":{"index.html":{}}}],["feature",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimage",{"_index":374,"title":{},"body":{"entities/Tag.html":{}}}],["featuredimageurl",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["features",{"_index":603,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":595,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":477,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":468,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(getusersparamdto",{"_index":475,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":313,"title":{},"body":{"injectables/PostServices.html":{}}}],["findonebyid",{"_index":469,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":478,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":602,"title":{},"body":{"index.html":{}}}],["follow",{"_index":637,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":543,"title":{},"body":{"index.html":{}}}],["full",{"_index":632,"title":{},"body":{"index.html":{}}}],["function",{"_index":504,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":537,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":598,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":446,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apiresponse({status",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":74,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":356,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":335,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":539,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":250,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":625,"title":{},"body":{"index.html":{}}}],["grow",{"_index":647,"title":{},"body":{"index.html":{}}}],["habijabi",{"_index":315,"title":{},"body":{"injectables/PostServices.html":{}}}],["habijabi@email.com",{"_index":489,"title":{},"body":{"injectables/UsersService.html":{}}}],["hands",{"_index":619,"title":{},"body":{"index.html":{}}}],["handy",{"_index":608,"title":{},"body":{"index.html":{}}}],["headers",{"_index":435,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":80,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":623,"title":{},"body":{"index.html":{}}}],["here",{"_index":655,"title":{},"body":{"index.html":{}}}],["host",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["https://nestjs.com",{"_index":661,"title":{},"body":{"index.html":{}}}],["id",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":497,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":72,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":582,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":605,"title":{},"body":{"index.html":{}}}],["inject",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":69,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostServices.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostServices.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":70,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostServices.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":310,"title":{},"body":{"injectables/PostServices.html":{},"controllers/UsersController.html":{}}}],["injectrepository",{"_index":308,"title":{},"body":{"injectables/PostServices.html":{},"injectables/UsersService.html":{}}}],["injectrepository(post",{"_index":312,"title":{},"body":{"injectables/PostServices.html":{}}}],["injectrepository(user",{"_index":481,"title":{},"body":{"injectables/UsersService.html":{}}}],["install",{"_index":597,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":556,"title":{},"body":{"index.html":{}}}],["interact",{"_index":626,"title":{},"body":{"index.html":{}}}],["ip",{"_index":436,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(status",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(status)@isnotempty()@apiproperty({enum",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isin",{"_index":267,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isint",{"_index":256,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isiso8601()@isoptional",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":131,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["isnotempty()@isemail",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@isoptional()@apipropertyoptional({description",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":133,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":129,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(90",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(90)@apiproperty({example",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isnotempty()@minlength(6)@apiproperty({example",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@isurl()@apipropertyoptional({description",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(90",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["jhon",{"_index":488,"title":{},"body":{"injectables/UsersService.html":{}}}],["job",{"_index":640,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":642,"title":{},"body":{"index.html":{}}}],["join",{"_index":653,"title":{},"body":{"index.html":{}}}],["json",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":658,"title":{},"body":{"index.html":{}}}],["key",{"_index":126,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"index.html":{}}}],["lastname",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["learn",{"_index":611,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":280,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letters",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":664,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":645,"title":{},"body":{"index.html":{}}}],["limit",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":639,"title":{},"body":{"index.html":{}}}],["list",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{}}}],["localhost",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":583,"title":{},"body":{"index.html":{}}}],["loop",{"_index":635,"title":{},"body":{"index.html":{}}}],["makes",{"_index":591,"title":{},"body":{"index.html":{}}}],["managing",{"_index":604,"title":{},"body":{"index.html":{}}}],["matches",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":587,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(90",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["message",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["metadata",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["metaoptions.dto",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["metaoptions.dto.ts",{"_index":124,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"coverage.html":{}}}],["metaoptions.dto.ts:6",{"_index":130,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["metaoptions.dto.ts:9",{"_index":132,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{}}}],["methods",{"_index":73,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(6",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minumum",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":531,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":644,"title":{},"body":{"index.html":{}}}],["mode",{"_index":561,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":581,"title":{},"body":{"index.html":{}}}],["mota",{"_index":491,"title":{},"body":{"injectables/UsersService.html":{}}}],["motu@email.com",{"_index":492,"title":{},"body":{"injectables/UsersService.html":{}}}],["myśliwiec",{"_index":659,"title":{},"body":{"index.html":{}}}],["name",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":263,"title":{},"body":{"classes/PatchPostDto.html":{},"index.html":{}}}],["nest",{"_index":550,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":663,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":515,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":273,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":517,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostServices.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newpost",{"_index":318,"title":{},"body":{"injectables/PostServices.html":{}}}],["newuser",{"_index":485,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":542,"title":{},"body":{"index.html":{}}}],["npm",{"_index":555,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":282,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":641,"title":{},"body":{"index.html":{}}}],["official",{"_index":588,"title":{},"body":{"index.html":{}}}],["open",{"_index":646,"title":{},"body":{"index.html":{}}}],["optional",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":668,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":511,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":345,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":441,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":252,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":255,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":437,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":631,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":266,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":261,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":272,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":347,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":258,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchpostsdto",{"_index":344,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuser",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":456,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(pathcuserdto",{"_index":429,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":270,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["pathcuserdto",{"_index":431,"title":{},"body":{"controllers/UsersController.html":{}}}],["pg",{"_index":523,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":586,"title":{},"body":{"index.html":{}}}],["please",{"_index":614,"title":{},"body":{"index.html":{}}}],["port",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["possible",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":47,"title":{"entities/Post.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.dto",{"_index":268,"title":{},"body":{"classes/PatchPostDto.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:10",{"_index":265,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:112",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:31",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:39",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:47",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:56",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:64",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:72",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:80",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:84",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:91",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["postgres",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["postrepository",{"_index":305,"title":{},"body":{"injectables/PostServices.html":{}}}],["posts",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":368,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.entity",{"_index":309,"title":{},"body":{"injectables/PostServices.html":{},"modules/PostsModule.html":{}}}],["posts/posts.entity",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":322,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservices",{"_index":298,"title":{"injectables/PostServices.html":{}},"body":{"injectables/PostServices.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{},"overview.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservices",{"_index":355,"title":{},"body":{"controllers/PostsController.html":{}}}],["posttype",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":285,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostServices.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":563,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":541,"title":{},"body":{"index.html":{}}}],["project",{"_index":553,"title":{},"body":{"index.html":{}}}],["properties",{"_index":125,"title":{"properties.html":{}},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":348,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/tags.service",{"_index":400,"title":{},"body":{"modules/TagsModule.html":{}}}],["providers/users.service",{"_index":442,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["put",{"_index":432,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":434,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":448,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":450,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":612,"title":{},"body":{"index.html":{}}}],["read",{"_index":654,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":572,"title":{},"body":{"index.html":{}}}],["real",{"_index":627,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":525,"title":{},"body":{"dependencies.html":{}}}],["regustered",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":303,"title":{},"body":{"injectables/PostServices.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["required",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":594,"title":{},"body":{"index.html":{}}}],["reset",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":606,"title":{},"body":{"index.html":{}}}],["response",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":79,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":77,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["run",{"_index":557,"title":{},"body":{"index.html":{}}}],["runs",{"_index":577,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":528,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":546,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["serialize",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isnotempty()@isenum(posttype",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":547,"title":{},"body":{"index.html":{}}}],["service",{"_index":311,"title":{},"body":{"injectables/PostServices.html":{}}}],["setup",{"_index":554,"title":{},"body":{"index.html":{}}}],["shajeeb123",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["side",{"_index":548,"title":{},"body":{"index.html":{}}}],["simple",{"_index":596,"title":{},"body":{"index.html":{}}}],["slug",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["specific",{"_index":253,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":649,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":538,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posttype.enum.ts",{"_index":533,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../status.enum.ts",{"_index":534,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":71,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":76,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":462,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":480,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:11",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:16",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":503,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":123,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":259,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":535,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/status.enum.ts",{"_index":536,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:13",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:25",{"_index":334,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:37",{"_index":343,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.entity.ts",{"_index":277,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/posts.entity.ts:14",{"_index":294,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.entity.ts:21",{"_index":288,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.entity.ts:28",{"_index":291,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.entity.ts:35",{"_index":292,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.entity.ts:42",{"_index":283,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.entity.ts:49",{"_index":290,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.entity.ts:55",{"_index":284,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.entity.ts:61",{"_index":289,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.entity.ts:68",{"_index":293,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.entity.ts:7",{"_index":286,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.entity.ts:75",{"_index":287,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.module.ts",{"_index":367,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":299,"title":{},"body":{"injectables/PostServices.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:31",{"_index":307,"title":{},"body":{"injectables/PostServices.html":{}}}],["src/posts/providers/posts.service.ts:8",{"_index":304,"title":{},"body":{"injectables/PostServices.html":{}}}],["src/tags/dtos/create",{"_index":224,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":401,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts",{"_index":393,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.entity.ts",{"_index":371,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tags.entity.ts:13",{"_index":384,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.entity.ts:21",{"_index":387,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.entity.ts:29",{"_index":389,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.entity.ts:35",{"_index":381,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.entity.ts:41",{"_index":388,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.entity.ts:48",{"_index":383,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.entity.ts:51",{"_index":377,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.entity.ts:54",{"_index":391,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.entity.ts:57",{"_index":379,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.module.ts",{"_index":398,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":251,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":271,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/providers/users.service.ts",{"_index":465,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:14",{"_index":471,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:20",{"_index":473,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:34",{"_index":476,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:56",{"_index":479,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:52",{"_index":428,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:62",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:67",{"_index":430,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.entity.ts",{"_index":402,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/users.entity.ts:13",{"_index":404,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:20",{"_index":406,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:28",{"_index":403,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:35",{"_index":407,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:6",{"_index":405,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.module",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":460,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":559,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":562,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":564,"title":{},"body":{"index.html":{}}}],["started",{"_index":540,"title":{"index.html":{}},"body":{}}],["starter",{"_index":552,"title":{},"body":{"index.html":{}}}],["statements",{"_index":498,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["stay",{"_index":634,"title":{},"body":{"index.html":{}}}],["steps",{"_index":574,"title":{},"body":{"index.html":{}}}],["story",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":592,"title":{},"body":{"index.html":{}}}],["string",{"_index":78,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":359,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apioperation({summary",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":342,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@post",{"_index":333,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":358,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":613,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":666,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":467,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":510,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":370,"title":{"entities/Tag.html":{}},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["tag.dto.ts",{"_index":225,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:2",{"_index":226,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tags",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/TagsController.html":{}}}],["tags.controller",{"_index":399,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags/tags.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":392,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":32,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsservice",{"_index":397,"title":{"injectables/TagsService.html":{}},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":575,"title":{},"body":{"index.html":{}}}],["test",{"_index":567,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":570,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":569,"title":{},"body":{"index.html":{}}}],["tests",{"_index":565,"title":{},"body":{"index.html":{}}}],["text",{"_index":380,"title":{},"body":{"entities/Tag.html":{}}}],["thanks",{"_index":648,"title":{},"body":{"index.html":{}}}],["this.postrepository.create(createpostdto",{"_index":319,"title":{},"body":{"injectables/PostServices.html":{}}}],["this.postrepository.save(newpost",{"_index":321,"title":{},"body":{"injectables/PostServices.html":{}}}],["this.postsservices.createpost(createpostdto",{"_index":361,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservices.findall(userid",{"_index":357,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":455,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findall(getusersparamdto",{"_index":452,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findonebyid('1234",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyid(2",{"_index":453,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":486,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":483,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":487,"title":{},"body":{"injectables/UsersService.html":{}}}],["thrown",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["thrown'})@isoptional()@isjson",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":628,"title":{},"body":{"index.html":{}}}],["title",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{}}}],["touch",{"_index":656,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@minlength(3",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":662,"title":{},"body":{"index.html":{}}}],["type",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"injectables/PostServices.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":296,"title":{},"body":{"entities/Post.html":{},"injectables/PostServices.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":369,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":464,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":274,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":551,"title":{},"body":{"index.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":386,"title":{},"body":{"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":566,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":474,"title":{},"body":{"injectables/UsersService.html":{}}}],["unlicensed",{"_index":674,"title":{},"body":{"properties.html":{}}}],["update",{"_index":341,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated",{"_index":269,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated'})@isint",{"_index":264,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatedate",{"_index":375,"title":{},"body":{"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":390,"title":{},"body":{"entities/Tag.html":{}}}],["updatepost",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":362,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostsdto",{"_index":340,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":636,"title":{},"body":{"index.html":{}}}],["url",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["usefactory",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":45,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostServices.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":275,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:34",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userid",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{}}}],["username",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostServices.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":461,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.entity",{"_index":463,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users/users.entity",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":408,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["usersmodule",{"_index":33,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":472,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":102,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":629,"title":{},"body":{"index.html":{}}}],["validatenested",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":439,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":134,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":127,"title":{},"body":{"classes/CreateMetaOptionsDto.html":{},"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":279,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["version",{"_index":672,"title":{},"body":{"properties.html":{}}}],["video",{"_index":621,"title":{},"body":{"index.html":{}}}],["visit",{"_index":610,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":624,"title":{},"body":{"index.html":{}}}],["void",{"_index":339,"title":{},"body":{"controllers/PostsController.html":{}}}],["watch",{"_index":560,"title":{},"body":{"index.html":{}}}],["website",{"_index":660,"title":{},"body":{"index.html":{}}}],["working",{"_index":609,"title":{},"body":{"index.html":{}}}],["world",{"_index":81,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":638,"title":{},"body":{"index.html":{}}}],["ye",{"_index":316,"title":{},"body":{"injectables/PostServices.html":{}}}],["you'd",{"_index":652,"title":{},"body":{"index.html":{}}}],["you're",{"_index":571,"title":{},"body":{"index.html":{}}}],["z])(?=.*[a",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z]).{8",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoalala",{"_index":317,"title":{},"body":{"injectables/PostServices.html":{}}}],["zoom",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/users.entity';\nimport { Post } from './posts/posts.entity';\nimport { TagsModule } from './tags/tags.module';\n\n/*\n* user created modules\n\n*/\n\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    TypeOrmModule.forRootAsync({\n      imports: [],\n      inject: [],\n      useFactory: () => ({\n        type: 'postgres',\n        entities: [User, Post],\n        synchronize: true,\n        port: 5432,\n        username: 'postgres',\n        password: 'shajeeb123',\n        host: 'localhost',\n        database: 'nestJs-blog',\n      }),\n    }),\n    TagsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthService } from './providers/auth.service';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly userService: UsersService,\n  ) {}\n\n  public login(email: string, password: string, id: string) {\n    const users = this.userService.findOnebyId('1234');\n\n    return 'SAMPLE_TOKEN';\n  }\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMetaOptionsDto.html":{"url":"classes/CreateMetaOptionsDto.html","title":"class - CreateMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-metaoptions.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-metaoptions.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-metaoptions.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreateMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsOptional()@ApiPropertyOptional({description: 'this is the content of the post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@IsUrl()@ApiPropertyOptional({description: 'Feature Image for your post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postType, description: 'Possible Values: 'post', 'page', 'story', 'series''})@IsNotEmpty()@IsEnum(postType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(6)@ApiProperty({example: 'my url'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(status)@IsNotEmpty()@ApiProperty({enum: status, description: 'Possible status are: 'draft', 'scheduled', 'review', 'published''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(90)@ApiProperty({example: 'This is title', description: 'This is the title for Post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { postType } from '../enums/postType.enum';\nimport { status } from '../enums/status.enum';\nimport { CreateMetaOptionsDto } from './create-post-metaoptions.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(90)\n  @ApiProperty({\n    example: 'This is title',\n    description: 'This is the title for Post',\n  })\n  title: string;\n\n  @ApiProperty({\n    enum: postType,\n    description: \"Possible Values: 'post', 'page', 'story', 'series'\",\n  })\n  @IsNotEmpty()\n  @IsEnum(postType)\n  postType: postType;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  @ApiProperty({\n    example: 'my url',\n  })\n  slug: string;\n\n  @IsEnum(status)\n  @IsNotEmpty()\n  @ApiProperty({\n    enum: status,\n    description:\n      \"Possible status are: 'draft', 'scheduled', 'review', 'published'\",\n  })\n  status: status;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({\n    description: 'this is the content of the post',\n  })\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema: string;\n\n  @IsString()\n  @IsOptional()\n  @IsUrl()\n  @ApiPropertyOptional({\n    description: 'Feature Image for your post',\n  })\n  featuredImageUrl?: string;\n\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n        },\n        value: {\n          type: 'string',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateMetaOptionsDto)\n  metaOptions?: CreateMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateTagDto {\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(90)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(90)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/, {message: 'Minumum 8 Letters, at least a number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(90)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(90)\n  lastName?: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/, {\n    message: 'Minumum 8 Letters, at least a number',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific ID', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific ID',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The Id of the post that need to be updated'})@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsIn, IsInt } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The Id of the post that need to be updated',\n  })\n  @IsInt()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                publishOn\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 90, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 90, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 90, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 90, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 90, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 90, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 90, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 90, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { CreateMetaOptionsDto } from './dtos/create-post-metaoptions.dto';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 90,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'varchar',\n    length: 90,\n    nullable: false,\n  })\n  postType: string;\n\n  @Column({\n    type: 'varchar',\n    length: 90,\n    nullable: false,\n  })\n  slug: string;\n\n  @Column({\n    type: 'varchar',\n    length: 90,\n    nullable: false,\n  })\n  status: string;\n\n  @Column({\n    type: 'varchar',\n    length: 90,\n    nullable: true,\n  })\n  content: string;\n\n  @Column({\n    type: 'varchar',\n    length: 90,\n    nullable: true,\n  })\n  schema: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n  })\n  featuredImageUrl: string;\n\n  @Column({\n    type: 'date',\n    nullable: true,\n  })\n  publishOn: Date;\n\n  @Column({\n    type: 'varchar',\n    length: 90,\n    nullable: true,\n  })\n  tags: string[];\n\n  @Column({\n    type: 'varchar',\n    length: 90,\n    nullable: true,\n  })\n  metaOptions: CreateMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostServices.html":{"url":"injectables/PostServices.html","title":"injectable - PostServices","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostServices\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Post } from '../posts.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePostDto } from '../dtos/create-post.dto';\n\n@Injectable()\nexport class PostServices {\n  constructor(\n    //injecting user service\n    @InjectRepository(Post)\n    private readonly postRepository: Repository,\n  ) {}\n  // public findAll(userId: string) {\n\n  //   // users service\n  //   return [\n  //     {\n  //       user: user,\n  //       title: 'asdfasdf',\n  //       content: 'habijabi',\n  //     },\n  //     {\n  //       user: user,\n  //       title: 'ye',\n  //       content: 'zoalala',\n  //     },\n  //   ];\n  // }\n\n  public async createPost(createPostDto: CreatePostDto) {\n    let newPost = this.postRepository.create(createPostDto);\n    newPost = await this.postRepository.save(newPost);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog Post'})@ApiResponse({status: 201, description: 'You created a 201 response successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostsDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update a new blog post'})@ApiResponse({status: 201, description: 'Updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostsDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post, Body, Patch } from '@nestjs/common';\nimport { PostServices } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsServices: PostServices) {}\n\n  @Get('/:userId?')\n  public getPosts(@Param('userId') userId: string) {\n    // return this.postsServices.findAll(userId);\n  }\n\n  @ApiOperation({\n    summary: 'Creates a new blog Post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You created a 201 response successfully',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postsServices.createPost(createPostDto);\n  }\n\n  @ApiOperation({\n    summary: 'Update a new blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Updated successfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostsDto: PatchPostDto) {\n    console.log(patchPostsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostServices\n\nPostServices\n\nPostsModule -->\n\nPostServices->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostServices\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostServices } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './posts.entity';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostServices],\n  imports: [UsersModule, TypeOrmModule.forFeature([Post])],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedDate\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImage\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:54\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'text',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImage?: string;\n\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @DeleteDateColumn()\n  deletedDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('tags')\nexport class TagsController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService\n\nTagsService\n\n\n\nTagsModule\n\nTagsModule\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  providers: [TagsService]\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class TagsService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 90, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 90, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 90, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 90, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 90,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 90,\n    nullable: true,\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 90,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 90,\n    nullable: false,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiResponse({status: 200, description: 'User Fetched successfully'})@ApiOperation({summary: 'Fetches a list of regustered users on the application '})@ApiQuery({name: 'limit', type: 'Number', required: false, description: 'A description', example: 10})@ApiQuery({name: 'page', type: 'Number', required: false, description: 'A description', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(pathcUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pathcUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Patch,\n  Put,\n  Delete,\n  Param,\n  Query,\n  Body,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(\n    //injecting\n    private readonly userService: UsersService,\n  ) {}\n\n  @Get('/:id?')\n  @ApiResponse({\n    status: 200,\n    description: 'User Fetched successfully',\n  })\n  @ApiOperation({\n    summary: 'Fetches a list of regustered users on the application ',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'Number',\n    required: false,\n    description: 'A description',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'Number',\n    required: false,\n    description: 'A description',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.userService.findAll(getUsersParamDto, limit, page);\n    //return this.userService.findOnebyId(2);\n  }\n\n  @Post()\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    return this.userService.createUser(createUserDto);\n  }\n\n  @Patch()\n  public patchUser(@Body() pathcUserDto: PatchUserDto) {\n    return pathcUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users.entity';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User])],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                class to connect to users table\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOnebyId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: Number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:34\n                        \n                    \n\n\n            \n                \n                        find all users\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            Number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOnebyId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOnebyId(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:56\n                        \n                    \n\n\n            \n                \n                        find all users by id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { firstName: string; email: string; id: number; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../users.entity';\nimport { CreateUserDto } from '../dtos/create-user.dto';\n\n/**\n *\n * class to connect to users table\n */\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  public async createUser(createUserDto: CreateUserDto) {\n    const existingUser = await this.usersRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n\n    let newUser = this.usersRepository.create(createUserDto);\n    newUser = await this.usersRepository.save(newUser);\n\n    return newUser;\n  }\n  /**\n   *\n   * find all users\n   */\n  public findAll(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number,\n    page: Number,\n  ) {\n    return [\n      {\n        firstName: 'jhon',\n        email: ' habijabi@email.com',\n        id: 233,\n      },\n      {\n        firstName: 'mota',\n        email: ' motu@email.com',\n        id: 232,\n      },\n    ];\n  }\n  /**\n   *\n   * find all users by id\n   */\n  public findOnebyId(id: string) {\n    return {\n      firstName: 'jhon',\n      email: ' habijabi@email.com',\n      id: 2,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-metaoptions.dto.ts\n            \n            class\n            CreateMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/posts.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostServices\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                        \n                            status   (src/.../status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n    src/posts/enums/status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        status\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostServices\n\nPostServices\n\nPostsModule -->\n\nPostServices->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
